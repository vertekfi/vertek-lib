query GetPool($id: String!) {
  poolGetPool(id: $id) {
    ...GqlPoolBaseFragment
  }
}

query GetAllPools {
  poolGetPools {
    ...GqlPoolMinimalFragment
  }
}

query GetAllTokens {
  tokenGetTokens {
    address
    name
    symbol
    chainId
    logoURI
    decimals
    tradable
    priority
  }
}

query GetTokenPrices {
  tokenGetCurrentPrices {
    address
    price
  }
}

query AdminGetAllPendingFeeData {
  adminGetAllPendingFeeData {
    totalValueUSD
    gauges {
      totalValueUSD
      values {
        poolId
        poolAddress
        poolName
        gauge
        gaugeAddress
        amount
        valueUSD
      }
    }

    feeCollector {
      totalValueUSD
      values {
        poolId
        poolAddress
        poolName
        token
        amount
        valueUSD
      }
    }
  }
}

query GetSorSwaps(
  $tokenIn: String!
  $tokenOut: String!
  $swapType: GqlSorSwapType!
  $swapAmount: BigDecimal!
  $swapOptions: GqlSorSwapOptionsInput!
) {
  swaps: sorGetSwaps(
    tokenIn: $tokenIn
    tokenOut: $tokenOut
    swapType: $swapType
    swapAmount: $swapAmount
    swapOptions: $swapOptions
  ) {
    ...GqlSorGetSwapsResponse
  }
}

fragment GqlSorGetSwapsResponse on GqlSorGetSwapsResponse {
  tokenIn
  tokenOut
  swapAmount
  tokenAddresses
  swapType
  marketSp
  swaps {
    poolId
    amount
    userData
    assetInIndex
    assetOutIndex
  }
  returnAmount
  returnAmountScaled
  returnAmountFromSwaps
  returnAmountConsideringFees
  swapAmount
  swapAmountScaled
  swapAmountForSwaps
  tokenInAmount
  tokenOutAmount
  effectivePrice
  effectivePriceReversed
  priceImpact
  routes {
    ...GqlSorSwapRoute
  }
}

fragment GqlSorSwapRoute on GqlSorSwapRoute {
  tokenIn
  tokenOut
  tokenInAmount
  tokenOutAmount
  share
  hops {
    ...GqlSorSwapRouteHop
  }
}

fragment GqlSorSwapRouteHop on GqlSorSwapRouteHop {
  poolId
  pool {
    id
    name
    type
    symbol
    dynamicData {
      totalLiquidity
    }
    allTokens {
      address
      isNested
      isPhantomBpt
      weight
    }
  }
  tokenIn
  tokenOut
  tokenInAmount
  tokenOutAmount
}

fragment GqlPoolBaseFragment on GqlPoolBase {
  id
  name
  symbol
  address
  decimals
  displayTokens {
    address
    symbol
    name
  }
  # owner: Bytes
  # factory: Bytes
  # createTime: Int!
  # investConfig: GqlPoolInvestConfig!
  # withdrawConfig: GqlPoolWithdrawConfig!

  # displayTokens: [GqlPoolTokenDisplay!]!
  # allTokens: [GqlPoolTokenExpanded!]!

  # dynamicData: GqlPoolDynamicData!
  #staking: GqlPoolStaking
}

fragment GqlPoolMinimalFragment on GqlPoolMinimal {
  id
  name
  symbol
  address
  decimals
  displayTokens {
    id
    address
    symbol
    name
  }
  # owner: Bytes
  # factory: Bytes
  # createTime: Int!
  # investConfig: GqlPoolInvestConfig!
  # withdrawConfig: GqlPoolWithdrawConfig!

  # displayTokens: [GqlPoolTokenDisplay!]!
  # allTokens: [GqlPoolTokenExpanded!]!

  # dynamicData: GqlPoolDynamicData!
  #staking: GqlPoolStaking
}
